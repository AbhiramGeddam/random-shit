		     +--------------------------+
		     |            OS            |
		     | PROJECT 2: USER PROGRAMS |
		     |     DESIGN DOCUMENT      |
		     +--------------------------+

---- GROUP 24 ----

>> Fill in the names, email addresses and matriculation numbers of your group members.

Reuben Devanesan <reuben.sd@iitgn.ac.in> 19110059
Abhiram Geddam <gsv.abhiram@iitgn.ac.in> 19110149
Gautam Vashistha <gautam.pv@iitgn.ac.in> 19110035
Shashwat Jain <shashwat.rj@iitgn.ac.in> 19110064

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

- No new struct is declared.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

- Using strtok_r() we split the command line string i.e. split the command and arguments separately. The real filename is used as the thread name when a new thread is created. The arguments are passed to the start_process(), load() and setup_stack() functions. The arguments and commands are pushed into the stacks when initializing the page. 
- Right order: End to start. So the last one would be the first argument and the first word would be the last.
- To prevent overflowing the stack page, whenever page fault exception is detected exit(-1) will be executed.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

- Since the argument is filenames and the strtok_r() function returns saveptr which stores the address of the argument allowing it to used in future steps, Pintos implements strtok_r().

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

- Kernel cost is reduced. Allows checking of filenames and arguments (whether they are valid or not).

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

- Yes, the file descriptors are allocated uniquely to each file.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

- Check the buffer point range.
- Check if reading/writing operation is being done by the buffer pointer.
- Descriptor of the thread holds the lock when the file is read/written to. 
- Release lock when the reading/writing operation stops.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

- Least: 1, Greatest: 2.
- Same for a system call copying only 2 bytes of data.

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

- Child thread will be present under its parent thread and then process_wait() function is executed. When the child thread terminates, the resources that it held will be released.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

- Check buffer pointer before accessing memory to make sure that all arguments of syscall are in the user memory. 
- Pointers in the kernel memory or with Null value will point to kernel, causing page fault. sys_exit() will be called to exit once page fault occurs.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

- When the child thread's status changes, child_status is updated. When the child thread is created, child_status = LOADING. process_execute() will return the id of the thread when the   thread is successfully executed. It will return -1 if child_status = FAILED.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

- Execute wait(C) before C exits after which process P will search the global exit list. So even if process P terminates without waiting before process C exits then C would appear to be       losing control, and therefore the OS will check the conditions.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

- We choose it as validating arguments and status were easy to control. 

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

- Advantages: Ability to control the thread and its attributes.
- Disadvantages: High cost.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

- Not changed.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
